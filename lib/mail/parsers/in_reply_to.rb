# Autogenerated from a Treetop grammar. Edits may be lost.


module Mail
  module InReplyTo
    include Treetop::Runtime

    def root
      @root ||= :primary
    end

    include RFC2822

    module Primary0
    end

    module Primary1
      def msg_id_value
        elements[1]
      end
    end

    module Primary2
    end

    module Primary3
      def first_msg_id
        elements[1]
      end

      def other_msg_ids
        elements[2]
      end

    end

    module Primary4
      def message_ids
        [first_msg_id] + other_msg_ids.elements.map { |o| o.msg_id_value }
      end
    end

    def _nt_primary
      start_index = index
      if node_cache[:primary].has_key?(index)
        cached = node_cache[:primary][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r2 = _nt_CFWS
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        r3 = _nt_msg_id
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            i5, s5 = index, []
            i6 = index
            i7, s7 = index, []
            r9 = _nt_CFWS
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s7 << r8
            if r8
              if has_terminal?(",", false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(",")
                r10 = nil
              end
              s7 << r10
              if r10
                r12 = _nt_CFWS
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s7 << r11
              end
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(Primary0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              r6 = r7
            else
              r13 = _nt_CFWS
              if r13
                r6 = r13
              else
                @index = i6
                r6 = nil
              end
            end
            s5 << r6
            if r6
              r14 = _nt_msg_id
              s5 << r14
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(Primary1)
            else
              @index = i5
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
          if r4
            i16, s16 = index, []
            if has_terminal?(";", false, index)
              r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(";")
              r17 = nil
            end
            s16 << r17
            if r17
              s18, i18 = [], index
              loop do
                if index < input_length
                  r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("any character")
                  r19 = nil
                end
                if r19
                  s18 << r19
                else
                  break
                end
              end
              r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
              s16 << r18
            end
            if s16.last
              r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
              r16.extend(Primary2)
            else
              @index = i16
              r16 = nil
            end
            if r16
              r15 = r16
            else
              r15 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r15
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Primary3)
        r0.extend(Primary4)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:primary][start_index] = r0

      r0
    end

  end

  class InReplyToParser < Treetop::Runtime::CompiledParser
    include InReplyTo
  end

end
